"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSshKeysOutput = exports.getSshKeys = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Get information on SSH Keys for use in other resources.
 *
 * This data source is useful if the SSH Keys in question are not managed by the provider or you need to
 * utilize any of the SSH Keys' data.
 *
 * Note: You can use the `digitalocean.SshKey` data source to obtain metadata
 * about a single SSH Key if you already know the unique `name` to retrieve.
 *
 * ## Example Usage
 *
 * For example, to find all SSH keys:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const keys = digitalocean.getSshKeys({
 *     sorts: [{
 *         direction: "asc",
 *         key: "name",
 *     }],
 * });
 * ```
 *
 * Or to find ones matching specific values:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const keys = digitalocean.getSshKeys({
 *     filters: [{
 *         key: "name",
 *         values: [
 *             "laptop",
 *             "desktop",
 *         ],
 *     }],
 * });
 * ```
 */
function getSshKeys(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("digitalocean:index/getSshKeys:getSshKeys", {
        "filters": args.filters,
        "sorts": args.sorts,
    }, opts);
}
exports.getSshKeys = getSshKeys;
/**
 * Get information on SSH Keys for use in other resources.
 *
 * This data source is useful if the SSH Keys in question are not managed by the provider or you need to
 * utilize any of the SSH Keys' data.
 *
 * Note: You can use the `digitalocean.SshKey` data source to obtain metadata
 * about a single SSH Key if you already know the unique `name` to retrieve.
 *
 * ## Example Usage
 *
 * For example, to find all SSH keys:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const keys = digitalocean.getSshKeys({
 *     sorts: [{
 *         direction: "asc",
 *         key: "name",
 *     }],
 * });
 * ```
 *
 * Or to find ones matching specific values:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const keys = digitalocean.getSshKeys({
 *     filters: [{
 *         key: "name",
 *         values: [
 *             "laptop",
 *             "desktop",
 *         ],
 *     }],
 * });
 * ```
 */
function getSshKeysOutput(args, opts) {
    return pulumi.output(args).apply((a) => getSshKeys(a, opts));
}
exports.getSshKeysOutput = getSshKeysOutput;
//# sourceMappingURL=getSshKeys.js.map