"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSshKeyOutput = exports.getSshKey = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Get information on a ssh key. This data source provides the name, public key,
 * and fingerprint as configured on your DigitalOcean account. This is useful if
 * the ssh key in question is not managed by the provider or you need to utilize any
 * of the keys data.
 *
 * An error is triggered if the provided ssh key name does not exist.
 *
 * ## Example Usage
 *
 * Get the ssh key:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const exampleSshKey = digitalocean.getSshKey({
 *     name: "example",
 * });
 * const exampleDroplet = new digitalocean.Droplet("exampleDroplet", {
 *     image: "ubuntu-18-04-x64",
 *     region: "nyc2",
 *     size: "s-1vcpu-1gb",
 *     sshKeys: [exampleSshKey.then(exampleSshKey => exampleSshKey.id)],
 * });
 * ```
 */
function getSshKey(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("digitalocean:index/getSshKey:getSshKey", {
        "name": args.name,
    }, opts);
}
exports.getSshKey = getSshKey;
/**
 * Get information on a ssh key. This data source provides the name, public key,
 * and fingerprint as configured on your DigitalOcean account. This is useful if
 * the ssh key in question is not managed by the provider or you need to utilize any
 * of the keys data.
 *
 * An error is triggered if the provided ssh key name does not exist.
 *
 * ## Example Usage
 *
 * Get the ssh key:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const exampleSshKey = digitalocean.getSshKey({
 *     name: "example",
 * });
 * const exampleDroplet = new digitalocean.Droplet("exampleDroplet", {
 *     image: "ubuntu-18-04-x64",
 *     region: "nyc2",
 *     size: "s-1vcpu-1gb",
 *     sshKeys: [exampleSshKey.then(exampleSshKey => exampleSshKey.id)],
 * });
 * ```
 */
function getSshKeyOutput(args, opts) {
    return pulumi.output(args).apply((a) => getSshKey(a, opts));
}
exports.getSshKeyOutput = getSshKeyOutput;
//# sourceMappingURL=getSshKey.js.map