"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getImageOutput = exports.getImage = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Get information on an image for use in other resources (e.g. creating a Droplet
 * based on snapshot). This data source provides all of the image properties as
 * configured on your DigitalOcean account. This is useful if the image in question
 * is not managed by the provider or you need to utilize any of the image's data.
 *
 * An error is triggered if zero or more than one result is returned by the query.
 *
 * ## Example Usage
 *
 * Get the data about a snapshot:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example1 = digitalocean.getImage({
 *     name: "example-1.0.0",
 * });
 * ```
 *
 * Reuse the data about a snapshot to create a Droplet:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const exampleImage = digitalocean.getImage({
 *     name: "example-1.0.0",
 * });
 * const exampleDroplet = new digitalocean.Droplet("exampleDroplet", {
 *     image: exampleImage.then(exampleImage => exampleImage.id),
 *     region: "nyc2",
 *     size: "s-1vcpu-1gb",
 * });
 * ```
 *
 * Get the data about an official image:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example2 = digitalocean.getImage({
 *     slug: "ubuntu-18-04-x64",
 * });
 * ```
 */
function getImage(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("digitalocean:index/getImage:getImage", {
        "id": args.id,
        "name": args.name,
        "slug": args.slug,
        "source": args.source,
    }, opts);
}
exports.getImage = getImage;
/**
 * Get information on an image for use in other resources (e.g. creating a Droplet
 * based on snapshot). This data source provides all of the image properties as
 * configured on your DigitalOcean account. This is useful if the image in question
 * is not managed by the provider or you need to utilize any of the image's data.
 *
 * An error is triggered if zero or more than one result is returned by the query.
 *
 * ## Example Usage
 *
 * Get the data about a snapshot:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example1 = digitalocean.getImage({
 *     name: "example-1.0.0",
 * });
 * ```
 *
 * Reuse the data about a snapshot to create a Droplet:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const exampleImage = digitalocean.getImage({
 *     name: "example-1.0.0",
 * });
 * const exampleDroplet = new digitalocean.Droplet("exampleDroplet", {
 *     image: exampleImage.then(exampleImage => exampleImage.id),
 *     region: "nyc2",
 *     size: "s-1vcpu-1gb",
 * });
 * ```
 *
 * Get the data about an official image:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example2 = digitalocean.getImage({
 *     slug: "ubuntu-18-04-x64",
 * });
 * ```
 */
function getImageOutput(args, opts) {
    return pulumi.output(args).apply((a) => getImage(a, opts));
}
exports.getImageOutput = getImageOutput;
//# sourceMappingURL=getImage.js.map