"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getImagesOutput = exports.getImages = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Get information on images for use in other resources (e.g. creating a Droplet
 * based on a snapshot), with the ability to filter and sort the results. If no filters are specified,
 * all images will be returned.
 *
 * This data source is useful if the image in question is not managed by the provider or you need to utilize any
 * of the image's data.
 *
 * Note: You can use the `digitalocean.getImage` data source to obtain metadata
 * about a single image if you already know the `slug`, unique `name`, or `id` to retrieve.
 *
 * ## Example Usage
 *
 * Use the `filter` block with a `key` string and `values` list to filter images.
 *
 * For example to find all Ubuntu images:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const ubuntu = digitalocean.getImages({
 *     filters: [{
 *         key: "distribution",
 *         values: ["Ubuntu"],
 *     }],
 * });
 * ```
 *
 * You can filter on multiple fields and sort the results as well:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const available = digitalocean.getImages({
 *     filters: [
 *         {
 *             key: "distribution",
 *             values: ["Ubuntu"],
 *         },
 *         {
 *             key: "regions",
 *             values: ["nyc3"],
 *         },
 *     ],
 *     sorts: [{
 *         direction: "desc",
 *         key: "created",
 *     }],
 * });
 * ```
 */
function getImages(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("digitalocean:index/getImages:getImages", {
        "filters": args.filters,
        "sorts": args.sorts,
    }, opts);
}
exports.getImages = getImages;
/**
 * Get information on images for use in other resources (e.g. creating a Droplet
 * based on a snapshot), with the ability to filter and sort the results. If no filters are specified,
 * all images will be returned.
 *
 * This data source is useful if the image in question is not managed by the provider or you need to utilize any
 * of the image's data.
 *
 * Note: You can use the `digitalocean.getImage` data source to obtain metadata
 * about a single image if you already know the `slug`, unique `name`, or `id` to retrieve.
 *
 * ## Example Usage
 *
 * Use the `filter` block with a `key` string and `values` list to filter images.
 *
 * For example to find all Ubuntu images:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const ubuntu = digitalocean.getImages({
 *     filters: [{
 *         key: "distribution",
 *         values: ["Ubuntu"],
 *     }],
 * });
 * ```
 *
 * You can filter on multiple fields and sort the results as well:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const available = digitalocean.getImages({
 *     filters: [
 *         {
 *             key: "distribution",
 *             values: ["Ubuntu"],
 *         },
 *         {
 *             key: "regions",
 *             values: ["nyc3"],
 *         },
 *     ],
 *     sorts: [{
 *         direction: "desc",
 *         key: "created",
 *     }],
 * });
 * ```
 */
function getImagesOutput(args, opts) {
    return pulumi.output(args).apply((a) => getImages(a, opts));
}
exports.getImagesOutput = getImagesOutput;
//# sourceMappingURL=getImages.js.map