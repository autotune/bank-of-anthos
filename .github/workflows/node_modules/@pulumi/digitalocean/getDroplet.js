"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDropletOutput = exports.getDroplet = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Get information on a Droplet for use in other resources. This data source provides
 * all of the Droplet's properties as configured on your DigitalOcean account. This
 * is useful if the Droplet in question is not managed by this provider or you need to
 * utilize any of the Droplet's data.
 *
 * **Note:** This data source returns a single Droplet. When specifying a `tag`, an
 * error is triggered if more than one Droplet is found.
 *
 * ## Example Usage
 *
 * Get the Droplet by name:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getDroplet({
 *     name: "web",
 * });
 * export const dropletOutput = example.then(example => example.ipv4Address);
 * ```
 *
 * Get the Droplet by tag:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getDroplet({
 *     tag: "web",
 * });
 * ```
 *
 * Get the Droplet by ID:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getDroplet({
 *     id: digitalocean_kubernetes_cluster.example.node_pool[0].nodes[0].droplet_id,
 * });
 * ```
 */
function getDroplet(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("digitalocean:index/getDroplet:getDroplet", {
        "id": args.id,
        "name": args.name,
        "tag": args.tag,
    }, opts);
}
exports.getDroplet = getDroplet;
/**
 * Get information on a Droplet for use in other resources. This data source provides
 * all of the Droplet's properties as configured on your DigitalOcean account. This
 * is useful if the Droplet in question is not managed by this provider or you need to
 * utilize any of the Droplet's data.
 *
 * **Note:** This data source returns a single Droplet. When specifying a `tag`, an
 * error is triggered if more than one Droplet is found.
 *
 * ## Example Usage
 *
 * Get the Droplet by name:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getDroplet({
 *     name: "web",
 * });
 * export const dropletOutput = example.then(example => example.ipv4Address);
 * ```
 *
 * Get the Droplet by tag:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getDroplet({
 *     tag: "web",
 * });
 * ```
 *
 * Get the Droplet by ID:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getDroplet({
 *     id: digitalocean_kubernetes_cluster.example.node_pool[0].nodes[0].droplet_id,
 * });
 * ```
 */
function getDropletOutput(args, opts) {
    return pulumi.output(args).apply((a) => getDroplet(a, opts));
}
exports.getDropletOutput = getDropletOutput;
//# sourceMappingURL=getDroplet.js.map