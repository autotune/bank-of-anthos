"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getImageOutput = exports.getImage = exports.getFloatingIpOutput = exports.getFloatingIp = exports.getFirewallOutput = exports.getFirewall = exports.getDropletsOutput = exports.getDroplets = exports.getDropletSnapshotOutput = exports.getDropletSnapshot = exports.getDropletOutput = exports.getDroplet = exports.getDomainsOutput = exports.getDomains = exports.getDomainOutput = exports.getDomain = exports.getDatabaseUserOutput = exports.getDatabaseUser = exports.getDatabaseReplicaOutput = exports.getDatabaseReplica = exports.getDatabaseClusterOutput = exports.getDatabaseCluster = exports.getDatabaseCaOutput = exports.getDatabaseCa = exports.getContainerRegistryOutput = exports.getContainerRegistry = exports.getCertificateOutput = exports.getCertificate = exports.getAppOutput = exports.getApp = exports.getAccount = exports.FloatingIpAssignment = exports.FloatingIp = exports.Firewall = exports.DropletSnapshot = exports.Droplet = exports.Domain = exports.DnsRecord = exports.DatabaseUser = exports.DatabaseReplica = exports.DatabaseFirewall = exports.DatabaseDb = exports.DatabaseConnectionPool = exports.DatabaseCluster = exports.CustomImage = exports.ContainerRegistryDockerCredentials = exports.ContainerRegistry = exports.Certificate = exports.Cdn = exports.App = void 0;
exports.MonitorAlert = exports.LoadBalancer = exports.KubernetesNodePool = exports.KubernetesCluster = exports.getVpcOutput = exports.getVpc = exports.getVolumeSnapshotOutput = exports.getVolumeSnapshot = exports.getVolumeOutput = exports.getVolume = exports.getTagsOutput = exports.getTags = exports.getTagOutput = exports.getTag = exports.getSshKeysOutput = exports.getSshKeys = exports.getSshKeyOutput = exports.getSshKey = exports.getSpacesBucketsOutput = exports.getSpacesBuckets = exports.getSpacesBucketObjectsOutput = exports.getSpacesBucketObjects = exports.getSpacesBucketObjectOutput = exports.getSpacesBucketObject = exports.getSpacesBucketOutput = exports.getSpacesBucket = exports.getSizesOutput = exports.getSizes = exports.getReservedIpOutput = exports.getReservedIp = exports.getRegionsOutput = exports.getRegions = exports.getRegionOutput = exports.getRegion = exports.getRecordsOutput = exports.getRecords = exports.getRecordOutput = exports.getRecord = exports.getProjectsOutput = exports.getProjects = exports.getProjectOutput = exports.getProject = exports.getLoadBalancerOutput = exports.getLoadBalancer = exports.getKubernetesVersionsOutput = exports.getKubernetesVersions = exports.getKubernetesClusterOutput = exports.getKubernetesCluster = exports.getImagesOutput = exports.getImages = void 0;
exports.types = exports.config = exports.Vpc = exports.VolumeSnapshot = exports.VolumeAttachment = exports.Volume = exports.UptimeCheck = exports.UptimeAlert = exports.Tag = exports.SshKey = exports.SpacesBucketPolicy = exports.SpacesBucketObject = exports.SpacesBucket = exports.ReservedIpAssignment = exports.ReservedIp = exports.Provider = exports.ProjectResources = exports.Project = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.App = null;
utilities.lazyLoad(exports, ["App"], () => require("./app"));
exports.Cdn = null;
utilities.lazyLoad(exports, ["Cdn"], () => require("./cdn"));
exports.Certificate = null;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));
exports.ContainerRegistry = null;
utilities.lazyLoad(exports, ["ContainerRegistry"], () => require("./containerRegistry"));
exports.ContainerRegistryDockerCredentials = null;
utilities.lazyLoad(exports, ["ContainerRegistryDockerCredentials"], () => require("./containerRegistryDockerCredentials"));
exports.CustomImage = null;
utilities.lazyLoad(exports, ["CustomImage"], () => require("./customImage"));
exports.DatabaseCluster = null;
utilities.lazyLoad(exports, ["DatabaseCluster"], () => require("./databaseCluster"));
exports.DatabaseConnectionPool = null;
utilities.lazyLoad(exports, ["DatabaseConnectionPool"], () => require("./databaseConnectionPool"));
exports.DatabaseDb = null;
utilities.lazyLoad(exports, ["DatabaseDb"], () => require("./databaseDb"));
exports.DatabaseFirewall = null;
utilities.lazyLoad(exports, ["DatabaseFirewall"], () => require("./databaseFirewall"));
exports.DatabaseReplica = null;
utilities.lazyLoad(exports, ["DatabaseReplica"], () => require("./databaseReplica"));
exports.DatabaseUser = null;
utilities.lazyLoad(exports, ["DatabaseUser"], () => require("./databaseUser"));
exports.DnsRecord = null;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));
exports.Domain = null;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));
exports.Droplet = null;
utilities.lazyLoad(exports, ["Droplet"], () => require("./droplet"));
exports.DropletSnapshot = null;
utilities.lazyLoad(exports, ["DropletSnapshot"], () => require("./dropletSnapshot"));
exports.Firewall = null;
utilities.lazyLoad(exports, ["Firewall"], () => require("./firewall"));
exports.FloatingIp = null;
utilities.lazyLoad(exports, ["FloatingIp"], () => require("./floatingIp"));
exports.FloatingIpAssignment = null;
utilities.lazyLoad(exports, ["FloatingIpAssignment"], () => require("./floatingIpAssignment"));
exports.getAccount = null;
utilities.lazyLoad(exports, ["getAccount"], () => require("./getAccount"));
exports.getApp = null;
exports.getAppOutput = null;
utilities.lazyLoad(exports, ["getApp", "getAppOutput"], () => require("./getApp"));
exports.getCertificate = null;
exports.getCertificateOutput = null;
utilities.lazyLoad(exports, ["getCertificate", "getCertificateOutput"], () => require("./getCertificate"));
exports.getContainerRegistry = null;
exports.getContainerRegistryOutput = null;
utilities.lazyLoad(exports, ["getContainerRegistry", "getContainerRegistryOutput"], () => require("./getContainerRegistry"));
exports.getDatabaseCa = null;
exports.getDatabaseCaOutput = null;
utilities.lazyLoad(exports, ["getDatabaseCa", "getDatabaseCaOutput"], () => require("./getDatabaseCa"));
exports.getDatabaseCluster = null;
exports.getDatabaseClusterOutput = null;
utilities.lazyLoad(exports, ["getDatabaseCluster", "getDatabaseClusterOutput"], () => require("./getDatabaseCluster"));
exports.getDatabaseReplica = null;
exports.getDatabaseReplicaOutput = null;
utilities.lazyLoad(exports, ["getDatabaseReplica", "getDatabaseReplicaOutput"], () => require("./getDatabaseReplica"));
exports.getDatabaseUser = null;
exports.getDatabaseUserOutput = null;
utilities.lazyLoad(exports, ["getDatabaseUser", "getDatabaseUserOutput"], () => require("./getDatabaseUser"));
exports.getDomain = null;
exports.getDomainOutput = null;
utilities.lazyLoad(exports, ["getDomain", "getDomainOutput"], () => require("./getDomain"));
exports.getDomains = null;
exports.getDomainsOutput = null;
utilities.lazyLoad(exports, ["getDomains", "getDomainsOutput"], () => require("./getDomains"));
exports.getDroplet = null;
exports.getDropletOutput = null;
utilities.lazyLoad(exports, ["getDroplet", "getDropletOutput"], () => require("./getDroplet"));
exports.getDropletSnapshot = null;
exports.getDropletSnapshotOutput = null;
utilities.lazyLoad(exports, ["getDropletSnapshot", "getDropletSnapshotOutput"], () => require("./getDropletSnapshot"));
exports.getDroplets = null;
exports.getDropletsOutput = null;
utilities.lazyLoad(exports, ["getDroplets", "getDropletsOutput"], () => require("./getDroplets"));
exports.getFirewall = null;
exports.getFirewallOutput = null;
utilities.lazyLoad(exports, ["getFirewall", "getFirewallOutput"], () => require("./getFirewall"));
exports.getFloatingIp = null;
exports.getFloatingIpOutput = null;
utilities.lazyLoad(exports, ["getFloatingIp", "getFloatingIpOutput"], () => require("./getFloatingIp"));
exports.getImage = null;
exports.getImageOutput = null;
utilities.lazyLoad(exports, ["getImage", "getImageOutput"], () => require("./getImage"));
exports.getImages = null;
exports.getImagesOutput = null;
utilities.lazyLoad(exports, ["getImages", "getImagesOutput"], () => require("./getImages"));
exports.getKubernetesCluster = null;
exports.getKubernetesClusterOutput = null;
utilities.lazyLoad(exports, ["getKubernetesCluster", "getKubernetesClusterOutput"], () => require("./getKubernetesCluster"));
exports.getKubernetesVersions = null;
exports.getKubernetesVersionsOutput = null;
utilities.lazyLoad(exports, ["getKubernetesVersions", "getKubernetesVersionsOutput"], () => require("./getKubernetesVersions"));
exports.getLoadBalancer = null;
exports.getLoadBalancerOutput = null;
utilities.lazyLoad(exports, ["getLoadBalancer", "getLoadBalancerOutput"], () => require("./getLoadBalancer"));
exports.getProject = null;
exports.getProjectOutput = null;
utilities.lazyLoad(exports, ["getProject", "getProjectOutput"], () => require("./getProject"));
exports.getProjects = null;
exports.getProjectsOutput = null;
utilities.lazyLoad(exports, ["getProjects", "getProjectsOutput"], () => require("./getProjects"));
exports.getRecord = null;
exports.getRecordOutput = null;
utilities.lazyLoad(exports, ["getRecord", "getRecordOutput"], () => require("./getRecord"));
exports.getRecords = null;
exports.getRecordsOutput = null;
utilities.lazyLoad(exports, ["getRecords", "getRecordsOutput"], () => require("./getRecords"));
exports.getRegion = null;
exports.getRegionOutput = null;
utilities.lazyLoad(exports, ["getRegion", "getRegionOutput"], () => require("./getRegion"));
exports.getRegions = null;
exports.getRegionsOutput = null;
utilities.lazyLoad(exports, ["getRegions", "getRegionsOutput"], () => require("./getRegions"));
exports.getReservedIp = null;
exports.getReservedIpOutput = null;
utilities.lazyLoad(exports, ["getReservedIp", "getReservedIpOutput"], () => require("./getReservedIp"));
exports.getSizes = null;
exports.getSizesOutput = null;
utilities.lazyLoad(exports, ["getSizes", "getSizesOutput"], () => require("./getSizes"));
exports.getSpacesBucket = null;
exports.getSpacesBucketOutput = null;
utilities.lazyLoad(exports, ["getSpacesBucket", "getSpacesBucketOutput"], () => require("./getSpacesBucket"));
exports.getSpacesBucketObject = null;
exports.getSpacesBucketObjectOutput = null;
utilities.lazyLoad(exports, ["getSpacesBucketObject", "getSpacesBucketObjectOutput"], () => require("./getSpacesBucketObject"));
exports.getSpacesBucketObjects = null;
exports.getSpacesBucketObjectsOutput = null;
utilities.lazyLoad(exports, ["getSpacesBucketObjects", "getSpacesBucketObjectsOutput"], () => require("./getSpacesBucketObjects"));
exports.getSpacesBuckets = null;
exports.getSpacesBucketsOutput = null;
utilities.lazyLoad(exports, ["getSpacesBuckets", "getSpacesBucketsOutput"], () => require("./getSpacesBuckets"));
exports.getSshKey = null;
exports.getSshKeyOutput = null;
utilities.lazyLoad(exports, ["getSshKey", "getSshKeyOutput"], () => require("./getSshKey"));
exports.getSshKeys = null;
exports.getSshKeysOutput = null;
utilities.lazyLoad(exports, ["getSshKeys", "getSshKeysOutput"], () => require("./getSshKeys"));
exports.getTag = null;
exports.getTagOutput = null;
utilities.lazyLoad(exports, ["getTag", "getTagOutput"], () => require("./getTag"));
exports.getTags = null;
exports.getTagsOutput = null;
utilities.lazyLoad(exports, ["getTags", "getTagsOutput"], () => require("./getTags"));
exports.getVolume = null;
exports.getVolumeOutput = null;
utilities.lazyLoad(exports, ["getVolume", "getVolumeOutput"], () => require("./getVolume"));
exports.getVolumeSnapshot = null;
exports.getVolumeSnapshotOutput = null;
utilities.lazyLoad(exports, ["getVolumeSnapshot", "getVolumeSnapshotOutput"], () => require("./getVolumeSnapshot"));
exports.getVpc = null;
exports.getVpcOutput = null;
utilities.lazyLoad(exports, ["getVpc", "getVpcOutput"], () => require("./getVpc"));
exports.KubernetesCluster = null;
utilities.lazyLoad(exports, ["KubernetesCluster"], () => require("./kubernetesCluster"));
exports.KubernetesNodePool = null;
utilities.lazyLoad(exports, ["KubernetesNodePool"], () => require("./kubernetesNodePool"));
exports.LoadBalancer = null;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));
exports.MonitorAlert = null;
utilities.lazyLoad(exports, ["MonitorAlert"], () => require("./monitorAlert"));
exports.Project = null;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));
exports.ProjectResources = null;
utilities.lazyLoad(exports, ["ProjectResources"], () => require("./projectResources"));
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
exports.ReservedIp = null;
utilities.lazyLoad(exports, ["ReservedIp"], () => require("./reservedIp"));
exports.ReservedIpAssignment = null;
utilities.lazyLoad(exports, ["ReservedIpAssignment"], () => require("./reservedIpAssignment"));
exports.SpacesBucket = null;
utilities.lazyLoad(exports, ["SpacesBucket"], () => require("./spacesBucket"));
exports.SpacesBucketObject = null;
utilities.lazyLoad(exports, ["SpacesBucketObject"], () => require("./spacesBucketObject"));
exports.SpacesBucketPolicy = null;
utilities.lazyLoad(exports, ["SpacesBucketPolicy"], () => require("./spacesBucketPolicy"));
exports.SshKey = null;
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));
exports.Tag = null;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));
exports.UptimeAlert = null;
utilities.lazyLoad(exports, ["UptimeAlert"], () => require("./uptimeAlert"));
exports.UptimeCheck = null;
utilities.lazyLoad(exports, ["UptimeCheck"], () => require("./uptimeCheck"));
exports.Volume = null;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));
exports.VolumeAttachment = null;
utilities.lazyLoad(exports, ["VolumeAttachment"], () => require("./volumeAttachment"));
exports.VolumeSnapshot = null;
utilities.lazyLoad(exports, ["VolumeSnapshot"], () => require("./volumeSnapshot"));
exports.Vpc = null;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));
// Export enums:
__exportStar(require("./types/enums"), exports);
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "digitalocean:index/app:App":
                return new exports.App(name, undefined, { urn });
            case "digitalocean:index/cdn:Cdn":
                return new exports.Cdn(name, undefined, { urn });
            case "digitalocean:index/certificate:Certificate":
                return new exports.Certificate(name, undefined, { urn });
            case "digitalocean:index/containerRegistry:ContainerRegistry":
                return new exports.ContainerRegistry(name, undefined, { urn });
            case "digitalocean:index/containerRegistryDockerCredentials:ContainerRegistryDockerCredentials":
                return new exports.ContainerRegistryDockerCredentials(name, undefined, { urn });
            case "digitalocean:index/customImage:CustomImage":
                return new exports.CustomImage(name, undefined, { urn });
            case "digitalocean:index/databaseCluster:DatabaseCluster":
                return new exports.DatabaseCluster(name, undefined, { urn });
            case "digitalocean:index/databaseConnectionPool:DatabaseConnectionPool":
                return new exports.DatabaseConnectionPool(name, undefined, { urn });
            case "digitalocean:index/databaseDb:DatabaseDb":
                return new exports.DatabaseDb(name, undefined, { urn });
            case "digitalocean:index/databaseFirewall:DatabaseFirewall":
                return new exports.DatabaseFirewall(name, undefined, { urn });
            case "digitalocean:index/databaseReplica:DatabaseReplica":
                return new exports.DatabaseReplica(name, undefined, { urn });
            case "digitalocean:index/databaseUser:DatabaseUser":
                return new exports.DatabaseUser(name, undefined, { urn });
            case "digitalocean:index/dnsRecord:DnsRecord":
                return new exports.DnsRecord(name, undefined, { urn });
            case "digitalocean:index/domain:Domain":
                return new exports.Domain(name, undefined, { urn });
            case "digitalocean:index/droplet:Droplet":
                return new exports.Droplet(name, undefined, { urn });
            case "digitalocean:index/dropletSnapshot:DropletSnapshot":
                return new exports.DropletSnapshot(name, undefined, { urn });
            case "digitalocean:index/firewall:Firewall":
                return new exports.Firewall(name, undefined, { urn });
            case "digitalocean:index/floatingIp:FloatingIp":
                return new exports.FloatingIp(name, undefined, { urn });
            case "digitalocean:index/floatingIpAssignment:FloatingIpAssignment":
                return new exports.FloatingIpAssignment(name, undefined, { urn });
            case "digitalocean:index/kubernetesCluster:KubernetesCluster":
                return new exports.KubernetesCluster(name, undefined, { urn });
            case "digitalocean:index/kubernetesNodePool:KubernetesNodePool":
                return new exports.KubernetesNodePool(name, undefined, { urn });
            case "digitalocean:index/loadBalancer:LoadBalancer":
                return new exports.LoadBalancer(name, undefined, { urn });
            case "digitalocean:index/monitorAlert:MonitorAlert":
                return new exports.MonitorAlert(name, undefined, { urn });
            case "digitalocean:index/project:Project":
                return new exports.Project(name, undefined, { urn });
            case "digitalocean:index/projectResources:ProjectResources":
                return new exports.ProjectResources(name, undefined, { urn });
            case "digitalocean:index/reservedIp:ReservedIp":
                return new exports.ReservedIp(name, undefined, { urn });
            case "digitalocean:index/reservedIpAssignment:ReservedIpAssignment":
                return new exports.ReservedIpAssignment(name, undefined, { urn });
            case "digitalocean:index/spacesBucket:SpacesBucket":
                return new exports.SpacesBucket(name, undefined, { urn });
            case "digitalocean:index/spacesBucketObject:SpacesBucketObject":
                return new exports.SpacesBucketObject(name, undefined, { urn });
            case "digitalocean:index/spacesBucketPolicy:SpacesBucketPolicy":
                return new exports.SpacesBucketPolicy(name, undefined, { urn });
            case "digitalocean:index/sshKey:SshKey":
                return new exports.SshKey(name, undefined, { urn });
            case "digitalocean:index/tag:Tag":
                return new exports.Tag(name, undefined, { urn });
            case "digitalocean:index/uptimeAlert:UptimeAlert":
                return new exports.UptimeAlert(name, undefined, { urn });
            case "digitalocean:index/uptimeCheck:UptimeCheck":
                return new exports.UptimeCheck(name, undefined, { urn });
            case "digitalocean:index/volume:Volume":
                return new exports.Volume(name, undefined, { urn });
            case "digitalocean:index/volumeAttachment:VolumeAttachment":
                return new exports.VolumeAttachment(name, undefined, { urn });
            case "digitalocean:index/volumeSnapshot:VolumeSnapshot":
                return new exports.VolumeSnapshot(name, undefined, { urn });
            case "digitalocean:index/vpc:Vpc":
                return new exports.Vpc(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("digitalocean", "index/app", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/cdn", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/certificate", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/containerRegistry", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/containerRegistryDockerCredentials", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/customImage", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/databaseCluster", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/databaseConnectionPool", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/databaseDb", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/databaseFirewall", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/databaseReplica", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/databaseUser", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/dnsRecord", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/domain", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/droplet", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/dropletSnapshot", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/firewall", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/floatingIp", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/floatingIpAssignment", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/kubernetesCluster", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/kubernetesNodePool", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/loadBalancer", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/monitorAlert", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/project", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/projectResources", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/reservedIp", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/reservedIpAssignment", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/spacesBucket", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/spacesBucketObject", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/spacesBucketPolicy", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/sshKey", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/tag", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/uptimeAlert", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/uptimeCheck", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/volume", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/volumeAttachment", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/volumeSnapshot", _module);
pulumi.runtime.registerResourceModule("digitalocean", "index/vpc", _module);
pulumi.runtime.registerResourcePackage("digitalocean", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:digitalocean") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map