"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Droplet = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a DigitalOcean Droplet resource. This can be used to create,
 * modify, and delete Droplets.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * // Create a new Web Droplet in the nyc2 region
 * const web = new digitalocean.Droplet("web", {
 *     image: "ubuntu-18-04-x64",
 *     region: "nyc2",
 *     size: "s-1vcpu-1gb",
 * });
 * ```
 *
 * ## Import
 *
 * Droplets can be imported using the Droplet `id`, e.g.
 *
 * ```sh
 *  $ pulumi import digitalocean:index/droplet:Droplet mydroplet 100823
 * ```
 */
class Droplet extends pulumi.CustomResource {
    /**
     * Get an existing Droplet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Droplet(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Droplet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Droplet.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["backups"] = state ? state.backups : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["disk"] = state ? state.disk : undefined;
            resourceInputs["dropletAgent"] = state ? state.dropletAgent : undefined;
            resourceInputs["dropletUrn"] = state ? state.dropletUrn : undefined;
            resourceInputs["gracefulShutdown"] = state ? state.gracefulShutdown : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["ipv4Address"] = state ? state.ipv4Address : undefined;
            resourceInputs["ipv4AddressPrivate"] = state ? state.ipv4AddressPrivate : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["ipv6Address"] = state ? state.ipv6Address : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["monitoring"] = state ? state.monitoring : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priceHourly"] = state ? state.priceHourly : undefined;
            resourceInputs["priceMonthly"] = state ? state.priceMonthly : undefined;
            resourceInputs["privateNetworking"] = state ? state.privateNetworking : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["resizeDisk"] = state ? state.resizeDisk : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sshKeys"] = state ? state.sshKeys : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["vcpus"] = state ? state.vcpus : undefined;
            resourceInputs["volumeIds"] = state ? state.volumeIds : undefined;
            resourceInputs["vpcUuid"] = state ? state.vpcUuid : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.image === undefined) && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["backups"] = args ? args.backups : undefined;
            resourceInputs["dropletAgent"] = args ? args.dropletAgent : undefined;
            resourceInputs["gracefulShutdown"] = args ? args.gracefulShutdown : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["ipv6Address"] = args ? args.ipv6Address : undefined;
            resourceInputs["monitoring"] = args ? args.monitoring : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateNetworking"] = args ? args.privateNetworking : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["resizeDisk"] = args ? args.resizeDisk : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["sshKeys"] = args ? args.sshKeys : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["volumeIds"] = args ? args.volumeIds : undefined;
            resourceInputs["vpcUuid"] = args ? args.vpcUuid : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["disk"] = undefined /*out*/;
            resourceInputs["dropletUrn"] = undefined /*out*/;
            resourceInputs["ipv4Address"] = undefined /*out*/;
            resourceInputs["ipv4AddressPrivate"] = undefined /*out*/;
            resourceInputs["locked"] = undefined /*out*/;
            resourceInputs["memory"] = undefined /*out*/;
            resourceInputs["priceHourly"] = undefined /*out*/;
            resourceInputs["priceMonthly"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["vcpus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Droplet.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Droplet = Droplet;
/** @internal */
Droplet.__pulumiType = 'digitalocean:index/droplet:Droplet';
//# sourceMappingURL=droplet.js.map