"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFloatingIpOutput = exports.getFloatingIp = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * > **Deprecated:** DigitalOcean Floating IPs have been renamed reserved IPs. This data source will be removed in a future release. Please use `digitalocean.ReservedIp` instead.
 *
 * Get information on a floating ip. This data source provides the region and Droplet id
 * as configured on your DigitalOcean account. This is useful if the floating IP
 * in question is not managed by the provider or you need to find the Droplet the IP is
 * attached to.
 *
 * An error is triggered if the provided floating IP does not exist.
 *
 * ## Example Usage
 *
 * Get the floating IP:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const config = new pulumi.Config();
 * const publicIp = config.requireObject("publicIp");
 * const example = digitalocean.getFloatingIp({
 *     ipAddress: publicIp,
 * });
 * export const fipOutput = example.then(example => example.dropletId);
 * ```
 */
function getFloatingIp(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("digitalocean:index/getFloatingIp:getFloatingIp", {
        "ipAddress": args.ipAddress,
    }, opts);
}
exports.getFloatingIp = getFloatingIp;
/**
 * > **Deprecated:** DigitalOcean Floating IPs have been renamed reserved IPs. This data source will be removed in a future release. Please use `digitalocean.ReservedIp` instead.
 *
 * Get information on a floating ip. This data source provides the region and Droplet id
 * as configured on your DigitalOcean account. This is useful if the floating IP
 * in question is not managed by the provider or you need to find the Droplet the IP is
 * attached to.
 *
 * An error is triggered if the provided floating IP does not exist.
 *
 * ## Example Usage
 *
 * Get the floating IP:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const config = new pulumi.Config();
 * const publicIp = config.requireObject("publicIp");
 * const example = digitalocean.getFloatingIp({
 *     ipAddress: publicIp,
 * });
 * export const fipOutput = example.then(example => example.dropletId);
 * ```
 */
function getFloatingIpOutput(args, opts) {
    return pulumi.output(args).apply((a) => getFloatingIp(a, opts));
}
exports.getFloatingIpOutput = getFloatingIpOutput;
//# sourceMappingURL=getFloatingIp.js.map